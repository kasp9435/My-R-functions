Routing <- function(w_camp,w_edge1.parts,max.dist) {
  #The coordinates of Alan the drone is initially set to be the charging station
  A_coords=C
  
  #The distance from the charging station to the points and to the endpoints
  #of the edges are calculated separately
  Mat.dist.Camp=as.matrix(dist(rbind(A_coords,P)))
  Mat.dist.E1=as.matrix(dist(rbind(A_coords,E1.new)))
  
  ## Desirability ##
  desirability_camp=w_camp/as.numeric(Mat.dist.Camp[1,-1])
  desirability_edge1=rep(NA,num.edgeparts)
  for (i in (1:num.edgeparts)) {
    desirability_edge1[i]=w_edge1.parts[i]/(min(c(Mat.dist.E1[1,-1])[i],c(Mat.dist.E1[1,-1])[i+1])+c(Mat.dist.E1[(i+1),(i+2)]))
  }

  desirability=c(max(desirability_camp),max(as.numeric(desirability_edge1)))

  has.visited=c("start")
  #use this to fill the not visited vector:
  string.camp=c()
  for (i in 1:length(w_camp)) {
    string.camp=c(string.camp,paste("C",i,sep=""))
  }
  string.E1=c()
  for (i in 1:num.edgeparts) {
    string.E1=c(string.E1,paste("e1.",i,sep=""))
  }
  not.visited=c(string.camp,string.E1,"end")
  #note that e1.1 is the edge part between the first and second point

  #W is the sum of the weights of the visited points
  W=0
  dist.traveled=0
  # A matrix from which rows are removed when the points are visited
  P.update=as.matrix(P)

  while ((dist.traveled+dist(rbind(A_coords,C)))<max.dist) {
  
    #When only the endpoint has not been visited, make Alan return
    if(length(not.visited)==1){
      has.visited=c(has.visited,not.visited[1])
      not.visited=not.visited[-1]
      dist.traveled=as.numeric(dist.traveled+dist(rbind(A_coords,C)))
      A_coords=C
      cat("Distance traveled: ", dist.traveled)#Prints the distance traveled
      break
    }
    
    if(which(desirability==max(desirability))==1){#Is one of the points closest to the coordinates of Alan
      ind=as.numeric(which(desirability_camp==max(desirability_camp)))#The index for which point is closest
      dist.traveled=as.numeric(dist.traveled+c(Mat.dist.Camp[1,-1])[ind])
      W=W+w_camp[ind]
      #### Some for loop ####
      for (i in 1:length(w_camp)) {
        if(not.visited[ind]==string.camp[i]){
          w_camp[i]<<-0 
        }
      }
      
      has.visited=c(has.visited,not.visited[ind])
      not.visited=not.visited[-ind]
      A_coords=P.update[ind,]#The coordinates of Alan is updated
      if(nrow(P.update)>2){
        P.update=P.update[-ind,]#The point that has been visited is removed from P
        P.update=as.matrix(P.update)
      }else if(nrow(P.update)==2){#If the second last point is visited a matrix transformation is needed
        P.update=P.update[-ind,]
        P.update=t(as.matrix(P.update))#To keep the coordinates as a row vector
      }
      else{
        #In case one or more edge has not been visited: pseudo points are added 
        #such that the comparison in the min.distances matrix can still be made
        P.update=cbind(c(30,30),c(30,30))
      }
    } else if (which(desirability==max(desirability))==2){#Is one of the endpoints for edge 1 closest
      ind=as.numeric(which(desirability_edge1==max(desirability_edge1)))
      if(length(ind)>1){
        ind=sample(ind, 1)
      }
    
      #As the whole edge section must be traveled the distance between the endpoints is also added
      dist.traveled=as.numeric(dist.traveled+min(c(Mat.dist.E1[1,-1])[ind],c(Mat.dist.E1[1,-1])[ind+1])+c(Mat.dist.E1[(ind+1),(ind+2)]))
      W=W+w_edge1.parts[ind]
      has.visited=c(has.visited,not.visited[which(not.visited==string.E1[ind])])
      not.visited=not.visited[-c(which(not.visited==string.E1[ind]))]
      #string.E1=string.E1[-ind]
      if(c(Mat.dist.E1[1,-1])[ind]<c(Mat.dist.E1[1,-1])[ind+1]){#The coordinates of Alan is set to the endpoint that was furthest away
        A_coords=E1.new[(ind+1),]
      } else if (c(Mat.dist.E1[1,-1])[ind]>c(Mat.dist.E1[1,-1])[ind+1]){
        A_coords=E1.new[ind,]
      }
      w_edge1.parts[ind]<<-0
    }
  
    #Update the distance matrices
    Mat.dist.Camp=as.matrix(dist(rbind(A_coords,P.update)))
    Mat.dist.E1=as.matrix(dist(rbind(A_coords,E1.new)))
  
    #Update the desirability
    #w_camp=rep(7,nrow(P.update))
    desirability_camp=w_camp[which(w_camp>0)]/as.numeric(Mat.dist.Camp[1,-1]) 
    for (i in which(desirability_edge1>0)) {
      desirability_edge1[i]=w_edge1.parts[i]/(min(c(Mat.dist.E1[1,-1])[i],c(Mat.dist.E1[1,-1])[i+1])+c(Mat.dist.E1[(i+1),(i+2)]))
    }
    desirability=c(max(desirability_camp),max(as.numeric(desirability_edge1)))
  
    ### Here it is considered if it is possible for the drone to visit the next most desirable point or edge###
    if(which(desirability==max(desirability))==1){#If a point has the highest desirability
      ind=as.numeric(which(desirability_camp==max(desirability_camp)))#The index for which point is closest
      if(as.numeric(dist.traveled+c(Mat.dist.Camp[1,-1])[ind]+dist(rbind(C,P.update[ind,])))>=max.dist){#If the point is too far away
        dist.traveled=dist.traveled+dist(rbind(A_coords,C))
        A_coords=C #Alan returns to the charging station
        break
      }
    }else if (which(desirability==max(desirability))==2){#If an edge section has the highest desirability
      ind=as.numeric(which(desirability_edge1==max(desirability_edge1)))
      D=as.numeric(dist.traveled+min(c(Mat.dist.E1[1,-1])[ind],c(Mat.dist.E1[1,-1])[ind+1])+c(Mat.dist.E1[(ind+1),(ind+2)]))
      next_coords=0
      if(c(Mat.dist.E1[1,-1])[ind]<c(Mat.dist.E1[1,-1])[ind+1]){#The coordinates of Alan is set to the endpoint that was furthest away
        new_coords=E1.new[(ind+1),]
      }else if (c(Mat.dist.E1[1,-1])[ind]>c(Mat.dist.E1[1,-1])[ind+1]){
        new_coords=E1.new[ind,]
      }
      if (D+as.numeric(dist(rbind(C,new_coords)))>=max.dist){#If the edge section cannot be covered on the remaining battery
        dist.traveled=dist.traveled+dist(rbind(A_coords,C))
        A_coords=C # Alan returns to the charging station
        break
      }
    }
  }
cat("Alan has visited: ", has.visited) #These are the points and edge sections that Alan has visited
cat("\nAlan has not visited: ", not.visited) #These are the points and edge sections that Alan has not visited
cat("\nDistance traveled: ", dist.traveled) #The total distance traveled by Alan
cat("\nSum of weights: ", W) #The sum of the weights of the points and edges Alan has visited
}
