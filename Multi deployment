Routing2 <- function(w_camp) {
  M2.visited.coordinates=A_coords
  while ((M2.B+c(M2.Bat.mat[M2.A_name,1]))<M2.bat.size) {
    
    #When only the endpoint has not been visited, make Alan return
    if(length(M2.not.visited)==1){
      M2.has.visited=c(M2.has.visited,M2.not.visited[1])
      M2.not.visited=M2.not.visited[-1]
      M2.B=as.numeric(M2.B+c(M2.Bat.mat[M2.A_name,1]))
      M2.dist.traveled=as.numeric(M2.dist.traveled+c(M2.distance[M2.A_name,1]))
      M2.A_coords=C
      break
    }
    
    if(which(M2.desirability==max(M2.desirability))==1){#Is one of the points closest to the coordinates of Alan
      ind=as.numeric(which(M2.desirability_camp==max(M2.desirability_camp)))#The index for which point is closest
      arrows(x0=M2.A_coords[1],y0=M2.A_coords[2],x1=M2.P.update[ind,1],y1=M2.P.update[ind,2],col="green",lty=2,lwd=2,length = 0.1)
      M2.B=as.numeric(M2.B+c(M2.Bat.mat[M2.A_name,(2:(N.P+1))])[ind])
      M2.dist.traveled=as.numeric(M2.dist.traveled+c(M2.distance[M2.A_name,(2:(N.P+1))])[ind])
      M.2W=M2.W+M2.w_camp[ind]
      M2.w_camp[ind]=0
      M2.A_coords=M2.P.update[ind,]#The coordinates of Alan is updated
      M2.A_name=rownames(M2.P.update)[ind]
      M2.has.visited=c(M2.has.visited,M2.A_name)
      M2.not.visited=M2.not.visited[-which(M2.not.visited==M2.A_name)]
      M2.visited.coordinates=rbind(M2.visited.coordinates,M2.A_coords)
    } else if (which(M2.desirability==max(M2.desirability))>=2){#Is one of the endpoints for edge 1 closest
      k=which(M2.desirability==max(M2.desirability))-1
      ind=as.numeric(which(get(paste("M2.desirability_edge.",k,sep=""))==max(get(paste("M2.desirability_edge.",k,sep="")))))
      if(length(ind)>1){
        ind=sample(ind, 1)
      }
      #As the whole edge section must be traveled the distance between the endpoints is also added
      M2.dist.traveled=as.numeric(M2.dist.traveled+min(c(M2.distance[M2.A_name,get(paste("l.M2.U",k,sep=""))])[ind],c(M2.distance[M2.A_name,get(paste("l.M2.U",k,sep=""))])[ind+1])+M2.distance[get(paste("l.M2.U",k,sep=""))[ind],get(paste("l.M2.U",k,sep=""))[(ind+1)]])
      M2.W=M2.W+get(paste("M2.w_edge_parts.",k,sep=""))[ind]
      M2.has.visited=c(M2.has.visited,M2.not.visited[which(M2.not.visited==get(paste("M2.string.E",k,sep=""))[ind])])
      M2.not.visited=M2.not.visited[-c(which(M2.not.visited==get(paste("M2.string.E",k,sep=""))[ind]))]
      
      if(M2.Bat.mat[M2.A_name,get(paste("l.M2.U",k,sep=""))[ind]]<M2.Bat.mat[M2.A_name,get(paste("l.M2.U",k,sep=""))[(ind+1)]]){#The coordinates of Alan is set to the endpoint that was furthest away
        arrows(x0=M2.A_coords[1],y0=M2.A_coords[2],x1=get(paste("M2.E_new.",k,sep=""))[ind,1],y1=get(paste("M2.E_new.",k,sep=""))[ind,2],col="green",lty=2,lwd=2,length = 0.1)
        arrows(x0=get(paste("M2.E_new.",k,sep=""))[ind,1],y0=get(paste("M2.E_new.",k,sep=""))[ind,2],
               x1=get(paste("M2.E_new.",k,sep=""))[(ind+1),1],y1=get(paste("M2.E_new.",k,sep=""))[(ind+1),2],col="green",lty=2,lwd=2,length = 0.1)
        
        M2.B=as.numeric(M2.B+M2.Bat.mat[M2.A_name,get(paste("l.M2.U",k,sep=""))[ind]]+M2.Bat.mat[get(paste("l.M2.U",k,sep=""))[ind],get(paste("l.M2.U",k,sep=""))[(ind+1)]])
        M2.A_coords=get(paste("M2.E_new.",k,sep=""))[(ind+1),]
        M2.A_name=get(paste("l.M2.U",k,sep=""))[(ind+1)]
        M2.visited.coordinates=rbind(M2.visited.coordinates,get(paste("M2.E_new.",k,sep=""))[(ind),])
        M2.visited.coordinates=rbind(M2.visited.coordinates,get(paste("M2.E_new.",k,sep=""))[(ind+1),])
      } else if (M2.Bat.mat[M2.A_name,get(paste("l.M2.U",k,sep=""))[ind]]>M2.Bat.mat[M2.A_name,get(paste("l.M2.U",k,sep=""))[(ind+1)]]){
        arrows(x0=M2.A_coords[1],y0=M2.A_coords[2],x1=get(paste("M2.E_new.",k,sep=""))[(ind+1),1],y1=get(paste("M2.E_new.",k,sep=""))[(ind+1),2],col="green",lwd=2,lty=2,length = 0.1)
        arrows(x0=get(paste("M2.E_new.",k,sep=""))[(ind+1),1],y0=get(paste("M2.E_new.",k,sep=""))[(ind+1),2],
               x1=get(paste("M2.E_new.",k,sep=""))[(ind),1],y1=get(paste("M2.E_new.",k,sep=""))[(ind),2],col="green",lty=2,lwd=2,length = 0.1)
        
        M2.B=as.numeric(M2.B+M2.Bat.mat[M2.A_name,get(paste("l.M2.U",k,sep=""))[(ind+1)]]+M2.Bat.mat[get(paste("l.M2.U",k,sep=""))[(ind+1)],get(paste("l.M2.U",k,sep=""))[ind]])
        M2.A_coords=get(paste("M2.E_new.",k,sep=""))[ind,]
        M2.A_name=get(paste("l.M2.U",k,sep=""))[ind]
        M2.visited.coordinates=rbind(M2.visited.coordinates,get(paste("M2.E_new.",k,sep=""))[(ind+1),])
        M2.visited.coordinates=rbind(M2.visited.coordinates,get(paste("M2.E_new.",k,sep=""))[(ind),])
      }
      dummy=get(paste("M2.w_edge_parts.",k,sep=""))
      dummy[ind]=0
      assign(paste("M2.w_edge_parts.",k,sep=""),dummy)
    }
    
    M2.desirability_camp=M2.w_camp/as.numeric(M2.Bat.mat[M2.A_name,P.names])
    M2.desirability_camp[which(is.nan(M2.desirability_camp)==TRUE)]=0
    
    M2.desirability=c(max(M2.desirability_camp))
    
    dummy.ind=2+N.P
    for (j in 1:N.E) {
      assign(paste("M2.desirability_edge.",j,sep=""),rep(NA,get(paste("M2.num.edgeparts.",j,sep="")))) 
      dummy=rep(NA,length(get(paste("M2.desirability_edge.",j,sep=""))))
      for (i in (1:length(get(paste("M2.desirability_edge.",j,sep=""))))) {
        dummy[i]=get(paste("M2.w_edge_parts.",j,sep=""))[i]/(min(c(M2.Bat.mat[M2.A_name,(dummy.ind:(dummy.ind+get(paste("M2.num.edgeparts.",j,sep=""))))])[i],
                                                              c(M2.Bat.mat[M2.A_name,(dummy.ind:(dummy.ind+get(paste("M2.num.edgeparts.",j,sep=""))))])[i+1])+
                                                              c(M2.Bat.mat[(dummy.ind+i-1),(dummy.ind+i)]))
      }
      assign(paste("M2.desirability_edge.",j,sep=""),dummy)
      dummy.ind=dummy.ind+get(paste("M2.num.edgeparts.",j,sep=""))+1
    }
    for (j in 1:N.E) {
      M2.desirability=c(M2.desirability,max(as.numeric(get(paste("M2.desirability_edge.",j,sep=""))))) 
    }
    
    ### Here it is considered if it is possible for the drone to visit the next most desirable point or edge###
    if(which(M2.desirability==max(M2.desirability))==1){#If a point has the highest desirability
      ind=as.numeric(which(M2.desirability_camp==max(M2.desirability_camp)))#The index for which point is closest
      if(as.numeric(M2.B+c(M2.Bat.mat[M2.A_name,(2:(N.P+1))])[ind]+M2.Bat.mat[P.names[ind],1])>=M2.bat.size){#If the point is too far away
        M2.B=M2.B+M2.Bat.mat[M2.A_name,1]
        M2.dist.traveled=M2.dist.traveled+M2.distance[M2.A_name,1]
        arrows(x0=M2.A_coords[1],y0=M2.A_coords[2],x1=C[1,1],y1=C[1,2],col="green",lty=2,lwd=2,length = 0.1)
        M2.A_coords=C #Alan returns to the charging station
        break
      }
    }else if (which(M2.desirability==max(M2.desirability))>=2){#If an edge section has the highest desirability
      k=which(M2.desirability==max(M2.desirability))-1
      ind=as.numeric(which(get(paste("M2.desirability_edge.",k,sep=""))==max(get(paste("M2.desirability_edge.",k,sep="")))))
      if(length(ind)>1){
        ind=sample(ind, 1)
      }
      
      if(M2.Bat.mat[M2.A_name,get(paste("l.M2.U",k,sep=""))[ind]]<M2.Bat.mat[M2.A_name,get(paste("l.M2.U",k,sep=""))[(ind+1)]]){#The coordinates of Alan is set to the endpoint that was furthest away
        D=as.numeric(M2.B+M2.Bat.mat[M2.A_name,get(paste("l.M2.U",k,sep=""))[ind]]+M2.Bat.mat[get(paste("l.M2.U",k,sep=""))[ind],get(paste("l.M2.U",k,sep=""))[(ind+1)]])
        new_coords=get(paste("M2.E_new.",k,sep=""))[(ind+1),]
        new_coords.name=get(paste("l.M2.U",k,sep=""))[(ind+1)]
      }else if (M2.Bat.mat[M2.A_name,get(paste("l.M2.U",k,sep=""))[ind]]>M2.Bat.mat[M2.A_name,get(paste("l.M2.U",k,sep=""))[(ind+1)]]){
        D=as.numeric(M2.B+M2.Bat.mat[M2.A_name,get(paste("l.M2.U",k,sep=""))[(ind+1)]]+M2.Bat.mat[get(paste("l.M2.U",k,sep=""))[(ind+1)],get(paste("l.M2.U",k,sep=""))[ind]])
        new_coords=get(paste("M2.E_new.",k,sep=""))[(ind),]
        new_coords.name=get(paste("l.M2.U",k,sep=""))[ind]
      }
      if (D+as.numeric(M2.Bat.mat[new_coords.name,1])>=M2.bat.size){#If the edge section cannot be covered on the remaining battery
        M2.B=M2.B+M2.Bat.mat[M2.A_name,1]
        M2.dist.traveled=M2.dist.traveled+M2.distance[M2.A_name,1]
        arrows(x0=M2.A_coords[1],y0=M2.A_coords[2],x1=C[1,1],y1=C[1,2],col="green",lty=2,lwd=2,length = 0.1)
        M2.A_coords=C # Alan returns to the charging station
        break
      }
    }
  }
  cat("Alan has visited: ", M2.has.visited) #These are the points and edge sections that Alan has visited
  cat("\nAlan has not visited: ", M2.not.visited) #These are the points and edge sections that Alan has not visited
  cat("\nDistance traveled: ", M2.dist.traveled) #The total distance traveled by Alan
  cat("\nKilo joules consumed: ", M2.B) #The total amount of kilo joules consumed by Alan
  cat("\nSum of weights: ", M2.W) #The sum of the weights of the points and edges Alan has visited
  M2.w_camp<<-M2.w_camp #This updates the weight of the camps to the global environment
  for (i in 1:N.E) {
    dummy=get(paste("M2.w_edge_parts.",i,sep=""))
    assign(paste("M2.w_edge_parts.",i,sep=""),dummy, envir = .GlobalEnv)
  } #This updates the weight of the edges to the global environment
  M2.has.visited<<-M2.has.visited
  M2.not.visited<<-M2.not.visited
  M2.P.update<<-M2.P.update
  M2.dist.traveled<<-M2.dist.traveled
  M2.B<<-M2.B
  M2.W<<-M2.W
  for (i in 2:(nrow(M2.visited.coordinates)-1)) {
    if(M2.visited.coordinates[i,1]==M2.visited.coordinates[(i+1),1]&M2.visited.coordinates[i,2]==M2.visited.coordinates[(i+1),2]){
      M2.visited.coordinates[i,]=c(NA,NA)
    } 
  }
  #As some edge nodes act as both starting and end point of the edge pieces the duplicated values was set to NA
  #These are now removed
  M2.visited.coordinates=na.omit(M2.visited.coordinates)
  M2.rname=c("C")
  
  for (i in 2:nrow(M2.visited.coordinates)) {
    for (j in 1:N.E) {
      if(any(duplicated(rbind(M2.visited.coordinates[i,],P)))){
        ind=as.numeric(which(duplicated(rbind(M2.visited.coordinates[i,],P))==TRUE))-1
        M2.rname=c(M2.rname,row.names(P)[ind])
      }else if(any(duplicated(rbind(M2.visited.coordinates[i,],get(paste("M2.E_new.",j,sep="")))))){
        ind=as.numeric(which(duplicated(rbind(M2.visited.coordinates[i,],get(paste("M2.E_new.",j,sep=""))))==TRUE))-1
        M2.rname=c(M2.rname,row.names(get(paste("M2.E_new.",j,sep="")))[ind])
      }
      if(any(duplicated(rbind(M2.visited.coordinates[i,],P)))&j>=2){
        M2.rname=M2.rname[1:(length(M2.rname)-1)]
      }
    }
  }
  M2.rname<<-M2.rname
  row.names(M2.visited.coordinates)<-M2.rname
  colnames(M2.visited.coordinates)<-c("x","y")
  M2.visited.coordinates<<-as.data.frame(M2.visited.coordinates)
  for (j in 1:N.E) {
    dummy.names=get(paste("l.M2.U",j,sep=""))
    if(anyDuplicated(dummy.names)>0){
      ind=anyDuplicated(dummy.names)
      dummy.names[ind]=paste(dummy.names[ind],".",1,sep="") 
    }
    assign(paste("l.M2.U",j,sep=""),dummy.names,envir = .GlobalEnv)  
  }
}
