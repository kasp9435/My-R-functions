#### Calculate distance of a route ####
distRoute <- function(adjmat, route) {
  d <- 0
  #for(i in 2:(nrow(adjmat)+1)) {
  for(i in 2:length(route)) {
    d <- d + adjmat[route[i-1],route[i]]
  }
  return(d)
}

#### Create a random route ####
randomRoute <- function(cities) {
  start <- rownames(cities)[1]
  route <- sample(rownames(cities)[-1])
  route <- c(start,route,start) # return back home
  return(route)
}

#### Swap entries in a route according to the 2-Opt method ####
swap <- function(route,i,k) {
  new_route <- route[1:(i-1)]
  new_route <- c( new_route, route[k:(i)] )
  new_route <- c( new_route, route[(k+1):length(route)] )
  return(new_route)
}

#### Check if the elements of a vector is sequential ####
is.sequential <- function(x){
  all(abs(diff(x)) == 1)
}

twoOpt <- function(Coordinates) {
  
  # compute adjacency matrix
  Coordinates=visited.coordinates
  
  distmat <-Battery.matrix(wind_dir,wind_speed,Coordinates)
  sum.manipulated.dist=0
  for (i in 2:(nrow(visited.coordinates)-1)) {
    
    if(rname[i]%in%rname[!(rname %in% c("C", P.names,E_names.2))]&rname[i+1]%in%rname[!(rname %in% c("C", P.names,E_names.2))]){
      
      sum.manipulated.dist=sum.manipulated.dist+distmat[i,(i+1)]*0.9+distmat[(i+1),i]*0.9
      distmat[i,(i+1)]=distmat[i,(i+1)]*0.1
      distmat[(i+1),i]=distmat[(i+1),i]*0.1
    }else if(rname[i]%in%rname[!(rname %in% c("C", P.names,E_names.1))]&rname[i+1]%in%rname[!(rname %in% c("C", P.names,E_names.1))]  ){
      sum.manipulated.dist=sum.manipulated.dist+distmat[i,(i+1)]*0.9+distmat[(i+1),i]*0.9
      distmat[i,(i+1)]=distmat[i,(i+1)]*0.1
      distmat[(i+1),i]=distmat[(i+1),i]*0.1
    }else{
      distmat[i,i]=distmat[i,i]
    }
  }
  sum.manipulated.dist<<-sum.manipulated.dist/2 #as you only travel the between the edge points once
  
  # start with random route
  best_route <- c(row.names(visited.coordinates),"C")
  min_d <- distRoute(distmat,best_route)
  
  # variable tracking
  track_dist <- c()
  
  # while-loop to perform complete 2-opt swap
  while(T) { 
    
    # record distance before looping through i and k
    old_d <- min_d
    
    # for-loops through values for i and k
    break_loop <- F
    for(i in 2:nrow(Coordinates)) {
      for(k in (i+1):nrow(Coordinates)) {
        
        # perform swap
        route <- swap(best_route,i,k)
        route<-na.omit(route)
        
        if(any(route[2:length(rname)]=="C")){
          o=which(route[2:length(rname)]=="C")+1
          route<-route[-o]
        }
        
        for (j in 1:N.E) {
          if(route[2]%in%get(paste("E_names.",j,sep=""))&route[(length(route)-1)]%in%get(paste("E_names.",j,sep=""))){
            if(is.sequential(c(which(get(paste("E_names.",j,sep=""))==route[2]),
                               which(get(paste("E_names.",j,sep=""))==route[(length(route)-1)])))&
               is.sequential(c(which(rname==route[2]),which(rname==route[(length(route)-1)])))){
              route=c(route[1:(length(route)-1)],route[2],route[length(route)]) 
            }
          }  
        }
        
        new_d <- distRoute(distmat,route)
        
        
        if(anyDuplicated(visited.coordinates)>0){
          dup.vec=rep(FALSE,length(which(duplicated(visited.coordinates)==TRUE)))
          for (j in 1:length(which(duplicated(visited.coordinates)==TRUE))) {
            if(visited.coordinates[(row.names(visited.coordinates)[which(duplicated(visited.coordinates)==TRUE)])[j],1]!=
               visited.coordinates[route[which(route==(row.names(visited.coordinates)[which(duplicated(visited.coordinates)==TRUE)])[j])-1],1]&
               visited.coordinates[(row.names(visited.coordinates)[which(duplicated(visited.coordinates)==TRUE)])[j],1]!=
               visited.coordinates[route[which(route==(row.names(visited.coordinates)[which(duplicated(visited.coordinates)==TRUE)])[j])+1],1]){
               
              dup.vec[j]=TRUE
              }
          }
          
          if(any(dup.vec==FALSE)==FALSE){  
            
            if(new_d < min_d) {
              min_d <- new_d
              best_route <- route
              break_loop <- T
              break() # break out of inner loop
            } # end outer if-statement
          }
        }else{
          if(new_d < min_d) {
            min_d <- new_d
            best_route <- route
            break_loop <- T
            break() # break out of inner loop
          } # end outer if-statement
        }
      } # close inner loop
      
      # break out of outer loop
      if(break_loop) break()
      
    } # close outer loop
    
    # update on variable tracking
    track_dist <- c(track_dist,new_d)
    
    # check if the for-loops made any improvements
    if(length(track_dist)>3){
      if(track_dist[length(track_dist)] == track_dist[(length(track_dist)-1)]&
         track_dist[(length(track_dist)-1)] == track_dist[(length(track_dist)-2)]) break()
    }
    #if(old_d == new_d) break() # break out of while loop
    
  } # close while loop
  
  # return
  return(list(distance = min_d,
              route = best_route,
              track_dist = track_dist)
  )
  
}

#### Plot the TSP solution ####

TSP.plot <- function(visited.coordinates) {
  result<- twoOpt(visited.coordinates)
  {plot.new()
  box(col="gray",lty=2)
  grid(nx = 10, ny = 10,
       lty = 2,      # Grid line type
       col = "gray", # Grid line color
       lwd = 1)      # Grid line width
  par(new = TRUE)
  plot(P, pch=19, col="red",
       main="", xlab = "", ylab="", 
       xlim=c(0,10), ylim=c(0,10), 
       xaxs = "i", yaxs="i",
       bty="n")
  points(C,pch=19,col="green")
  #The endpoints of the first edge are plotted and connected by a line
  for (i in 1:N.E) {
    points(get(paste("edge_points.",i,sep = "")),pch=19,col="orange")  
  }
  #Use this loop for the line segments in the plot
  for (j in 1:N.E) {
    for (i in 1:(length(get(paste("edge_points.",j,sep = ""))$x)-1)) {
      segments(x0=get(paste("edge_points.",j,sep = ""))$x[i], y0=get(paste("edge_points.",j,sep = ""))$y[i],
               x1=get(paste("edge_points.",j,sep = ""))$x[(i+1)],y1=get(paste("edge_points.",j,sep = ""))$y[(i+1)], col="orange")
    }
  }
  for (i in 1:length(result$route)) {
        arrows(x0=as.numeric(visited.coordinates[result$route[i],1]),y0=as.numeric(visited.coordinates[result$route[i],2]),
           x1=as.numeric(visited.coordinates[result$route[i+1],1]), y1=as.numeric(visited.coordinates[result$route[i+1],2]),
           col="blue",lty=2,lwd=2,length = 0.1)
  }
  #legend("bottomleft",c("Charging","Points","Edge endpoints"),cex=.8,col=c("green","red","orange"),pch=c(19,19,19))
  }
}
