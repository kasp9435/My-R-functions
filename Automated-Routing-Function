Routing <- function(w_camp,bat.size) {
  while ((B+lambda*dist(rbind(A_coords,C)))<bat.size) {
    
    #When only the endpoint has not been visited, make Alan return
    if(length(not.visited)==1){
      has.visited=c(has.visited,not.visited[1])
      not.visited=not.visited[-1]
      B=as.numeric(B+lambda*dist(rbind(A_coords,C)))
      dist.traveled=as.numeric(dist.traveled+dist(rbind(A_coords,C)))
      A_coords=C
      #cat("Distance traveled: ", dist.traveled)#Prints the distance traveled
      break
    }
    
    if(which(desirability==max(desirability))==1){#Is one of the points closest to the coordinates of Alan
      ind=as.numeric(which(desirability_camp==max(desirability_camp)))#The index for which point is closest
      B=as.numeric(B+lambda*c(Mat.dist.Camp[1,-1])[ind])
      dist.traveled=as.numeric(dist.traveled+c(Mat.dist.Camp[1,-1])[ind])
      W=W+w_camp[ind]
      
      for (i in 1:length(w_camp)) {
        if(not.visited[ind]==string.camp[i]){
          w_camp[i]=0 
        }
      }
      
      has.visited=c(has.visited,not.visited[ind])
      not.visited=not.visited[-ind]
      A_coords=P.update[ind,]#The coordinates of Alan is updated
      if(nrow(P.update)>2){
        P.update=P.update[-ind,]#The point that has been visited is removed from P
        P.update=as.matrix(P.update)
      }else if(nrow(P.update)==2){#If the second last point is visited a matrix transformation is needed
        P.update=P.update[-ind,]
        P.update=t(as.matrix(P.update))#To keep the coordinates as a row vector
      }
      else{
        #In case one or more edge has not been visited: pseudo points are added 
        #such that the comparison in the min.distances matrix can still be made
        P.update=cbind(c(30,30),c(30,30))
      }
    } else if (which(desirability==max(desirability))>=2){#Is one of the endpoints for edge 1 closest
      k=which(desirability==max(desirability))-1
      ind=as.numeric(which(get(paste("desirability_edge.",k,sep=""))==max(get(paste("desirability_edge.",k,sep="")))))
      #ind=as.numeric(which(desirability_edge1==max(desirability_edge1)))
      if(length(ind)>1){
        ind=sample(ind, 1)
      }
      
      #As the whole edge section must be traveled the distance between the endpoints is also added
      B=as.numeric(B+lambda*min(c(get(paste("Mat.dist.E",k,sep=""))[1,-1])[ind],c(get(paste("Mat.dist.E",k,sep=""))[1,-1])[ind+1])+lambda*c(get(paste("Mat.dist.E",k,sep=""))[(ind+1),(ind+2)]))
      #B=as.numeric(B+lambda*min(c(Mat.dist.E1[1,-1])[ind],c(Mat.dist.E1[1,-1])[ind+1])+lambda*c(Mat.dist.E1[(ind+1),(ind+2)]))
      dist.traveled=as.numeric(dist.traveled+min(c(get(paste("Mat.dist.E",k,sep=""))[1,-1])[ind],c(get(paste("Mat.dist.E",k,sep=""))[1,-1])[ind+1])+c(get(paste("Mat.dist.E",k,sep=""))[(ind+1),(ind+2)]))
      #dist.traveled=as.numeric(dist.traveled+min(c(Mat.dist.E1[1,-1])[ind],c(Mat.dist.E1[1,-1])[ind+1])+c(Mat.dist.E1[(ind+1),(ind+2)]))
      W=W+get(paste("w_edge_parts.",k,sep=""))[ind]
      #W=W+w_edge1.parts[ind]
      has.visited=c(has.visited,not.visited[which(not.visited==get(paste("string.E",k,sep=""))[ind])])
      not.visited=not.visited[-c(which(not.visited==get(paste("string.E",k,sep=""))[ind]))]
      #string.E1=string.E1[-ind]
      if(c(get(paste("Mat.dist.E",k,sep=""))[1,-1])[ind]<c(get(paste("Mat.dist.E",k,sep=""))[1,-1])[ind+1]){#The coordinates of Alan is set to the endpoint that was furthest away
        A_coords=get(paste("E_new.",k,sep=""))[(ind+1),]
      } else if (c(get(paste("Mat.dist.E",k,sep=""))[1,-1])[ind]>c(get(paste("Mat.dist.E",k,sep=""))[1,-1])[ind+1]){
        A_coords=get(paste("E_new.",k,sep=""))[ind,]
      }
      dummy=get(paste("w_edge_parts.",k,sep=""))
      dummy[ind]=0
      assign(paste("w_edge_parts.",k,sep=""),dummy)
    }
    
    #Update the distance matrices
    Mat.dist.Camp=as.matrix(dist(rbind(A_coords,P.update)))
    for (i in 1:N.E) {
      assign(paste("Mat.dist.E",i,sep=""),as.matrix(dist(rbind(A_coords,get(paste("E_new.",i,sep =""))))))
    }
    
    #Update the desirability
    
    desirability_camp=w_camp[-which(w_camp==0)]/as.numeric(Mat.dist.Camp[1,-1])
    desirability=c(max(desirability_camp))
    for (j in 1:N.E) {
      
      dummy=get(paste("desirability_edge.",j,sep=""))
      for (i in which(dummy>0)) {
        dummy[i]=get(paste("w_edge_parts.",j,sep=""))[i]/(min(c(get(paste("Mat.dist.E",j,sep=""))[1,-1])[i],c(get(paste("Mat.dist.E",j,sep=""))[1,-1])[i+1])+c(get(paste("Mat.dist.E",j,sep=""))[(i+1),(i+2)]))
      }
      assign(paste("desirability_edge.",j,sep=""),dummy)
    }
    for (j in 1:N.E) {
      desirability=c(desirability,max(as.numeric(get(paste("desirability_edge.",j,sep=""))))) 
    }
    
    ### Here it is considered if it is possible for the drone to visit the next most desirable point or edge###
    if(which(desirability==max(desirability))==1){#If a point has the highest desirability
      ind=as.numeric(which(desirability_camp==max(desirability_camp)))#The index for which point is closest
      if(as.numeric(B+lambda*c(Mat.dist.Camp[1,-1])[ind]+lambda*dist(rbind(C,P.update[ind,])))>=bat.size){#If the point is too far away
        B=B+lambda*dist(rbind(A_coords,C))
        dist.traveled=dist.traveled+dist(rbind(A_coords,C))
        A_coords=C #Alan returns to the charging station
        break
      }
    }else if (which(desirability==max(desirability))>=2){#If an edge section has the highest desirability
      k=which(desirability==max(desirability))-1
      ind=as.numeric(which(get(paste("desirability_edge.",k,sep=""))==max(get(paste("desirability_edge.",k,sep="")))))
      if(length(ind)>1){
        ind=sample(ind, 1)
      }
      D=as.numeric(B+lambda*min(c(get(paste("Mat.dist.E",k,sep=""))[1,-1])[ind],c(get(paste("Mat.dist.E",k,sep=""))[1,-1])[ind+1])+lambda*c(get(paste("Mat.dist.E",k,sep=""))[(ind+1),(ind+2)]))
      next_coords=0
      if(c(get(paste("Mat.dist.E",k,sep=""))[1,-1])[ind]<c(get(paste("Mat.dist.E",k,sep=""))[1,-1])[ind+1]){#The coordinates of Alan is set to the endpoint that was furthest away
        new_coords=get(paste("E_new.",k,sep=""))[(ind+1),]
      }else if (c(get(paste("Mat.dist.E",k,sep=""))[1,-1])[ind]>c(get(paste("Mat.dist.E",k,sep=""))[1,-1])[ind+1]){
        new_coords=get(paste("E_new.",k,sep=""))[ind,]
      }
      if (D+lambda*as.numeric(dist(rbind(C,new_coords)))>=bat.size){#If the edge section cannot be covered on the remaining battery
        B=B+lambda*dist(rbind(A_coords,C))
        dist.traveled=dist.traveled+dist(rbind(A_coords,C))
        A_coords=C # Alan returns to the charging station
        break
      }
    }
  }
  cat("Alan has visited: ", has.visited) #These are the points and edge sections that Alan has visited
  cat("\nAlan has not visited: ", not.visited) #These are the points and edge sections that Alan has not visited
  cat("\nDistance traveled: ", dist.traveled) #The total distance traveled by Alan
  cat("\nKilo joules consumed: ", B) #The total amount of kilo joules consumed by Alan
  cat("\nSum of weights: ", W) #The sum of the weights of the points and edges Alan has visited
  w_camp<<-w_camp #This updates the weight of the camps to the global environment
  for (i in 1:N.E) {
    dummy=get(paste("w_edge_parts.",i,sep=""))
    assign(paste("w_edge_parts.",i,sep=""),dummy, envir = .GlobalEnv)
  } #This updates the weight of the edges to the global environment
  has.visited<<-has.visited
  not.visited<<-not.visited
  P.update<<-P.update
}
