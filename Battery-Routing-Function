Routing2 <- function(w_camp,bat.size) {
  visited.coordinates=A_coords
  while ((B+c(Bat.mat[A_name,1]))<bat.size) {
    
    #When only the endpoint has not been visited, make Alan return
    if(length(not.visited)==1){
      has.visited=c(has.visited,not.visited[1])
      not.visited=not.visited[-1]
      B=as.numeric(B+c(Bat.mat[A_name,1]))
      dist.traveled=as.numeric(dist.traveled+c(distance[A_name,1]))
      A_coords=C
      break
    }
    
    if(which(desirability==max(desirability))==1){#Is one of the points closest to the coordinates of Alan
      ind=as.numeric(which(desirability_camp==max(desirability_camp)))#The index for which point is closest
      arrows(x0=A_coords[1],y0=A_coords[2],x1=P.update[ind,1],y1=P.update[ind,2],col="green",lty=2,lwd=2,length = 0.1)
      B=as.numeric(B+c(Bat.mat[A_name,(2:(N.P+1))])[ind])
      dist.traveled=as.numeric(dist.traveled+c(distance[A_name,(2:(N.P+1))])[ind])
      W=W+w_camp[ind]
      w_camp[ind]=0
      #for (i in 1:length(w_camp)) {
      #  if(not.visited[ind]==string.camp[i]){
      #    w_camp[i]=0 
      #  }
      #}
      A_coords=P.update[ind,]#The coordinates of Alan is updated
      A_name=rownames(P.update)[ind]
      has.visited=c(has.visited,A_name)
      not.visited=not.visited[-which(not.visited==A_name)]
      visited.coordinates=rbind(visited.coordinates,A_coords)
    } else if (which(desirability==max(desirability))>=2){#Is one of the endpoints for edge 1 closest
      k=which(desirability==max(desirability))-1
      ind=as.numeric(which(get(paste("desirability_edge.",k,sep=""))==max(get(paste("desirability_edge.",k,sep="")))))
      if(length(ind)>1){
        ind=sample(ind, 1)
      }
      #As the whole edge section must be traveled the distance between the endpoints is also added
      dist.traveled=as.numeric(dist.traveled+min(c(distance[A_name,get(paste("E_names.",k,sep=""))])[ind],c(distance[A_name,get(paste("E_names.",k,sep=""))])[ind+1])+distance[get(paste("E_names.",k,sep=""))[ind],get(paste("E_names.",k,sep=""))[(ind+1)]])
      W=W+get(paste("w_edge_parts.",k,sep=""))[ind]
      has.visited=c(has.visited,not.visited[which(not.visited==get(paste("string.E",k,sep=""))[ind])])
      not.visited=not.visited[-c(which(not.visited==get(paste("string.E",k,sep=""))[ind]))]
      
      if(Bat.mat[A_name,get(paste("E_names.",k,sep=""))[ind]]<Bat.mat[A_name,get(paste("E_names.",k,sep=""))[(ind+1)]]){#The coordinates of Alan is set to the endpoint that was furthest away
        arrows(x0=A_coords[1],y0=A_coords[2],x1=get(paste("E_new.",k,sep=""))[ind,1],y1=get(paste("E_new.",k,sep=""))[ind,2],col="green",lty=2,lwd=2,length = 0.1)
        arrows(x0=get(paste("E_new.",k,sep=""))[ind,1],y0=get(paste("E_new.",k,sep=""))[ind,2],
               x1=get(paste("E_new.",k,sep=""))[(ind+1),1],y1=get(paste("E_new.",k,sep=""))[(ind+1),2],col="green",lty=2,lwd=2,length = 0.1)
        
        B=as.numeric(B+Bat.mat[A_name,get(paste("E_names.",k,sep=""))[ind]]+Bat.mat[get(paste("E_names.",k,sep=""))[ind],get(paste("E_names.",k,sep=""))[(ind+1)]])
        A_coords=get(paste("E_new.",k,sep=""))[(ind+1),]
        A_name=get(paste("E_names.",k,sep=""))[(ind+1)]
        visited.coordinates=rbind(visited.coordinates,get(paste("E_new.",k,sep=""))[(ind),])
        visited.coordinates=rbind(visited.coordinates,get(paste("E_new.",k,sep=""))[(ind+1),])
      } else if (Bat.mat[A_name,get(paste("E_names.",k,sep=""))[ind]]>Bat.mat[A_name,get(paste("E_names.",k,sep=""))[(ind+1)]]){
        arrows(x0=A_coords[1],y0=A_coords[2],x1=get(paste("E_new.",k,sep=""))[(ind+1),1],y1=get(paste("E_new.",k,sep=""))[(ind+1),2],col="green",lwd=2,lty=2,length = 0.1)
        arrows(x0=get(paste("E_new.",k,sep=""))[(ind+1),1],y0=get(paste("E_new.",k,sep=""))[(ind+1),2],
               x1=get(paste("E_new.",k,sep=""))[(ind),1],y1=get(paste("E_new.",k,sep=""))[(ind),2],col="green",lty=2,lwd=2,length = 0.1)
        
        B=as.numeric(B+Bat.mat[A_name,get(paste("E_names.",k,sep=""))[(ind+1)]]+Bat.mat[get(paste("E_names.",k,sep=""))[(ind+1)],get(paste("E_names.",k,sep=""))[ind]])
        A_coords=get(paste("E_new.",k,sep=""))[ind,]
        A_name=get(paste("E_names.",k,sep=""))[ind]
        visited.coordinates=rbind(visited.coordinates,get(paste("E_new.",k,sep=""))[(ind+1),])
        visited.coordinates=rbind(visited.coordinates,get(paste("E_new.",k,sep=""))[(ind),])
      }
      dummy=get(paste("w_edge_parts.",k,sep=""))
      dummy[ind]=0
      assign(paste("w_edge_parts.",k,sep=""),dummy)
    }
    
    desirability_camp=w_camp/as.numeric(distance[A_name,P.names])
    desirability_camp[which(is.nan(desirability_camp)==TRUE)]=0
    
    desirability=c(max(desirability_camp))
    
    dummy.ind=1+N.P
    for (j in 1:N.E) {
      dummy=get(paste("desirability_edge.",j,sep=""))
      for (i in which(dummy>0)) {
        dummy[i]=get(paste("w_edge_parts.",j,sep=""))[i]/((min(c(distance[A_name,(dummy.ind:(dummy.ind+get(paste("num.edgeparts.",j,sep=""))))])[i],
                                                              c(distance[A_name,(dummy.ind:(dummy.ind+get(paste("num.edgeparts.",j,sep=""))))])[i+1]))+
                                                            c(distance[(dummy.ind+i),(dummy.ind+1+i)]))
      }
      assign(paste("desirability_edge.",j,sep=""),dummy)
      dummy.ind=dummy.ind+get(paste("num.edgeparts.",j,sep=""))
    }
    for (j in 1:N.E) {
      desirability=c(desirability,max(as.numeric(get(paste("desirability_edge.",j,sep=""))))) 
    }
    
    ### Here it is considered if it is possible for the drone to visit the next most desirable point or edge###
    if(which(desirability==max(desirability))==1){#If a point has the highest desirability
      ind=as.numeric(which(desirability_camp==max(desirability_camp)))#The index for which point is closest
      if(as.numeric(B+c(Bat.mat[A_name,(2:(N.P+1))])[ind]+Bat.mat[P.names[ind],1])>=bat.size){#If the point is too far away
        B=B+Bat.mat[A_name,1]
        dist.traveled=dist.traveled+distance[A_name,1]
        arrows(x0=A_coords[1],y0=A_coords[2],x1=C[1,1],y1=C[1,2],col="green",lty=2,lwd=2,length = 0.1)
        A_coords=C #Alan returns to the charging station
        break
      }
    }else if (which(desirability==max(desirability))>=2){#If an edge section has the highest desirability
      k=which(desirability==max(desirability))-1
      ind=as.numeric(which(get(paste("desirability_edge.",k,sep=""))==max(get(paste("desirability_edge.",k,sep="")))))
      if(length(ind)>1){
        ind=sample(ind, 1)
      }
      
      if(Bat.mat[A_name,get(paste("E_names.",k,sep=""))[ind]]<Bat.mat[A_name,get(paste("E_names.",k,sep=""))[(ind+1)]]){#The coordinates of Alan is set to the endpoint that was furthest away
        D=as.numeric(B+Bat.mat[A_name,get(paste("E_names.",k,sep=""))[ind]]+Bat.mat[get(paste("E_names.",k,sep=""))[ind],get(paste("E_names.",k,sep=""))[(ind+1)]])
        new_coords=get(paste("E_new.",k,sep=""))[(ind+1),]
        new_coords.name=get(paste("E_names.",k,sep=""))[(ind+1)]
      }else if (Bat.mat[A_name,get(paste("E_names.",k,sep=""))[ind]]>Bat.mat[A_name,get(paste("E_names.",k,sep=""))[(ind+1)]]){
        D=as.numeric(B+Bat.mat[A_name,get(paste("E_names.",k,sep=""))[(ind+1)]]+Bat.mat[get(paste("E_names.",k,sep=""))[(ind+1)],get(paste("E_names.",k,sep=""))[ind]])
        new_coords=get(paste("E_new.",k,sep=""))[(ind),]
        new_coords.name=get(paste("E_names.",k,sep=""))[ind]
      }
      if (D+as.numeric(Bat.mat[new_coords.name,1])>=bat.size){#If the edge section cannot be covered on the remaining battery
        B=B+Bat.mat[new_coords.name,1]
        dist.traveled=dist.traveled+distance[new_coords.name,1]
        arrows(x0=A_coords[1],y0=A_coords[2],x1=C[1,1],y1=C[1,2],col="green",lty=2,lwd=2,length = 0.1)
        A_coords=C # Alan returns to the charging station
        break
      }
    }
  }
  cat("Alan has visited: ", has.visited) #These are the points and edge sections that Alan has visited
  cat("\nAlan has not visited: ", not.visited) #These are the points and edge sections that Alan has not visited
  cat("\nDistance traveled: ", dist.traveled) #The total distance traveled by Alan
  cat("\nKilo joules consumed: ", B) #The total amount of kilo joules consumed by Alan
  cat("\nSum of weights: ", W) #The sum of the weights of the points and edges Alan has visited
  w_camp<<-w_camp #This updates the weight of the camps to the global environment
  for (i in 1:N.E) {
    dummy=get(paste("w_edge_parts.",i,sep=""))
    assign(paste("w_edge_parts.",i,sep=""),dummy, envir = .GlobalEnv)
  } #This updates the weight of the edges to the global environment
  has.visited<<-has.visited
  not.visited<<-not.visited
  P.update<<-P.update
  dist.traveled<<-dist.traveled
  B<<-B
  for (i in 2:(nrow(visited.coordinates)-1)) {
    if(visited.coordinates[i,1]==visited.coordinates[(i+1),1]&visited.coordinates[i,2]==visited.coordinates[(i+1),2]){
      visited.coordinates[i,]=c(NA,NA)
    } 
  }
  #As some edge nodes act as both starting and end point of the edge pieces the duplicated values was set to NA
  #These are now removed
  visited.coordinates=na.omit(visited.coordinates)
  rname=c("C")
  for (i in 2:nrow(visited.coordinates)) {
    for (j in 1:N.E) {
      if(any(duplicated(rbind(visited.coordinates[i,],P)))){
        ind=as.numeric(which(duplicated(rbind(visited.coordinates[i,],P))==TRUE))-1
        rname=c(rname,row.names(P)[ind])
      }else if(any(duplicated(rbind(visited.coordinates[i,],get(paste("E_new.",j,sep="")))))){
        ind=as.numeric(which(duplicated(rbind(visited.coordinates[i,],get(paste("E_new.",j,sep=""))))==TRUE))-1
        rname=c(rname,row.names(get(paste("E_new.",j,sep="")))[ind])
      }
      if(any(duplicated(rbind(visited.coordinates[i,],P)))&j==2){
        rname=rname[1:(length(rname)-1)]
      }
    }
    
  }
  rname<<-rname
  row.names(visited.coordinates)<-rname
  colnames(visited.coordinates)<-c("x","y")
  visited.coordinates<<-as.data.frame(visited.coordinates)
  if(anyDuplicated(E_names.1)>0){
    ind=anyDuplicated(E_names.1)
    E_names.1[ind]=paste(E_names.1[ind],".",1,sep="") 
  }
  if(anyDuplicated(E_names.2)>0){
    ind=anyDuplicated(E_names.2)
    E_names.2[ind]=paste(E_names.2[ind],".",1,sep="") 
  }
  E_names.1<<-E_names.1
  E_names.2<<-E_names.2
}
